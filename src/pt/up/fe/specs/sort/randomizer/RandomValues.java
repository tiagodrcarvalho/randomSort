/**
 * Copyright 2014 Tiago D. R. Carvalho.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License. under the License.
 */
package pt.up.fe.specs.sort.randomizer;

import java.util.Random;

/* MORE VALUES {1934, 980, 1661, 461, 1115, 483, 153, 1578, 1848, 1827},
{1013, 431, 1341, 1727, 1616, 627, 220, 1264, 54, 266}, {712, 1338, 239,
210, 717, 275, 1913, 835, 1126, 798}, {1488, 648, 787, 207, 508, 1216,
25, 1357, 52, 427}, {1543, 1704, 314, 1671, 366, 1253, 425, 1433, 299,
1936}, {1849, 1946, 729, 1833, 601, 885, 1318, 823, 939, 751}, {1383,
1997, 642, 1993, 898, 817, 533, 1470, 1746, 468}, {1121, 1476, 655, 1333,
245, 280, 1480, 1763, 583, 1503}, {246, 475, 1299, 380, 19, 1748, 478,
484, 1052, 438}, {1562, 594, 1405, 78, 690, 1688, 1847, 1370, 146, 595},
{677, 1239, 1900, 1659, 364, 1890, 1809, 1373, 40, 386}, {152, 1056,
1902, 1630, 1134, 1494, 664, 1423, 734, 269}, {1038, 1098, 640, 1558,
1024, 504, 228, 1445, 1958, 1438}, {1166, 340, 803, 236, 1580, 393, 1989,
1667, 630, 1887}, {1656, 1268, 1891, 769, 268, 1456, 285, 843, 267, 402},
{1272, 50, 30, 1394, 1109, 837, 818, 669, 1843, 1852}, {596, 320, 1093,
1484, 1564, 1870, 1150, 1276, 788, 1173}, {1160, 652, 1553, 1221, 955,
809, 1556, 1043, 869, 1929}, {130, 702, 1598, 1296, 1904, 1157, 91, 682,
1437, 678}, {437, 1417, 707, 941, 858, 315, 107, 1807, 102, 1888}, {1884,
519, 221, 794, 1387, 725, 334, 1693, 1896, 300}, {1531, 757, 1418, 150,
1062, 1025, 780, 208, 1005, 565}, {1197, 1712, 328, 356, 1552, 95, 856,
67, 815, 1780}, {1020, 466, 878, 1073, 1820, 839, 1328, 318, 254, 485},
{327, 1395, 1269, 1612, 1091, 1378, 181, 1358, 1897, 681}, {1314, 1572,
244, 745, 1597, 660, 298, 740, 1668, 576}, {1530, 607, 265, 225, 1959,
1613, 886, 1203, 81, 946}, {1308, 560, 1648, 1271, 559, 1161, 1538, 1689,
833, 177}, {1265, 805, 1977, 454, 1190, 1349, 473, 1920, 1211, 129},
{378, 333, 1164, 1102, 1735, 1325, 1000, 1001, 1295, 675}, {727, 1861,
691, 1136, 1626, 1789, 1242, 1844, 418, 1879}, {1303, 88, 1918, 1229,
1315, 831, 1961, 1130, 1278, 1709}, {1482, 1794, 292, 115, 779, 1699,
1118, 969, 907, 827}, {186, 1027, 1422, 1234, 1576, 699, 1158, 452, 132,
1910}, {4, 1270, 1911, 1785, 992, 1469, 868, 816, 1506, 1627}, {116,
1854, 397, 1083, 231, 1505, 1419, 913, 1657, 852}, {385, 1079, 522, 1018,
1937, 1244, 915, 463, 1512, 1801}, {94, 278, 1364, 697, 1559, 294, 1909,
1149, 1288, 1127}, {494, 720, 977, 160, 1716, 57, 1905, 1590, 544, 1489},
{1089, 579, 1771, 1447, 1803, 1754, 1698, 1380, 1927, 98}, {1932, 59,
1894, 603, 672, 989, 89, 822, 1440, 853}, {1565, 785, 929, 1770, 1502,
1860, 1622, 1721, 125, 767}, {379, 1030, 647, 113, 389, 1478, 1954, 1643,
1783, 1267}, {1722, 93, 945, 1903, 1633, 1838, 1137, 970, 1792, 1579},
{1034, 1212, 1384, 487, 645, 968, 1342, 1350, 442, 713}, {450, 1765,
1292, 1971, 671, 662, 444, 183, 735, 561}, {1815, 1218, 396, 219, 1247,
698, 1011, 358, 1461, 1525}, {1228, 291, 973, 1490, 279, 696, 1196, 994,
325, 830}, {260, 355, 257, 542, 777, 930, 1569, 516, 1758, 621}, {877,
998, 193, 1143, 255, 1045, 1881, 626, 1004, 701}, {488, 1695, 1872, 1811,
60, 639, 15, 73, 1377, 692}, {1685, 1307, 708, 789, 307, 1804, 1359, 1,
479, 1474}, {1535, 1215, 802, 1863, 416, 635, 1632, 1159, 23, 1835}, {46,
1791, 566, 1658, 1529, 1390, 1087, 781, 136, 1361}, {589, 1560, 1332, 7,
411, 537, 866, 390, 1012, 211}, {1515, 1786, 1636, 139, 1813, 894, 1047,
1836, 202, 965}, {1582, 1416, 55, 557, 768, 258, 1046, 182, 1177, 1151},
{1424, 1745, 248, 293, 546, 1475, 1039, 1156, 981, 531}, {34, 75, 543,
1396, 1609, 829, 1310, 947, 1399, 1856}, {679, 1750, 166, 434, 1999, 536,
573, 754, 736, 1458}, {252, 634, 851, 419, 1963, 1304, 1428, 750, 1762,
387}, {1454, 556, 908, 1601, 1049, 1738, 1058, 1421, 17, 847}, {1969,
286, 174, 1320, 1773, 1878, 976, 45, 1978, 1243}, {392, 590, 44, 1779,
47, 548, 407, 1973, 1857, 1899}, {83, 1629, 646, 1957, 887, 439, 624,
1755, 766, 1351}, {1388, 1563, 175, 1924, 984, 535, 415, 441, 1213,
1481}, {1876, 784, 1545, 808, 376, 786, 1772, 1193, 1262, 365}, {1953,
354, 187, 1284, 1967, 1717, 16, 1528, 465, 105}, {501, 90, 714, 1641,
961, 1201, 1300, 126, 490, 588}, {1919, 982, 1740, 1473, 100, 256, 1759,
1962, 582, 1372}, {493, 746, 1050, 578, 967, 352, 901, 71, 1254, 641},
{730, 618, 306, 1675, 372, 1976, 776, 1915, 1764, 1425}, {123, 353, 1542,
1882, 1858, 140, 1466, 1245, 653, 1356}, {861, 551, 203, 339, 1808, 518,
1404, 1407, 1871, 1678}, {1063, 1864, 80, 329, 11, 553, 1452, 149, 974,
511}, {360, 1650, 459, 1672, 271, 206, 1739, 1321, 1628, 575}, {1317,
971, 1690, 1054, 1548, 471, 1128, 857, 1309, 1198}, {834, 308, 428, 1170,
1517, 1624, 1402, 1574, 1162, 867}, {1614, 1028, 445, 158, 31, 1057, 663,
755, 1291, 1676}, {336, 112, 1930, 1970, 41, 103, 581, 665, 1413, 541},
{70, 510, 10, 1492, 684, 1744, 179, 600, 770, 1230}, {1707, 383, 993,
1943, 552, 169, 201, 144, 1518, 289}, {319, 899, 622, 1116, 539, 1188,
196, 1124, 1620, 322}, {342, 604, 617, 131, 1365, 1335, 134, 1974, 623,
287}, {1107, 943, 916, 762, 796, 657, 1258, 467, 65, 807}, {62, 1600,
104, 1086, 1471, 585, 1522, 1084, 1131, 771}, {555, 337, 810, 1605, 413,
1033, 563, 53, 1941, 799}, {234, 1651, 1205, 1730, 1486, 752, 1255, 964,
840, 721}, {1044, 643, 517, 458, 1938, 608, 1220, 722, 512, 764}, {1822,
1451, 1450, 1185, 922, 688, 1581, 1749, 133, 1021}, {159, 1293, 357,
1290, 1189, 1477, 1775, 1023, 523, 237}, {1680, 1256, 21, 825, 1330,
1483, 1199, 189, 1588, 1922}, {1042, 1100, 1186, 1868, 1793, 440, 1566,
1111, 84, 1366}, {1412, 638, 1652, 1435, 284, 558, 845, 1769, 184, 1022},
{155, 1367, 495, 670, 1400, 1493, 1631, 1914, 1263, 795}, {934, 1710,
1812, 927, 1432, 472, 1097, 949, 893, 1845}, {1682, 1029, 222, 1095,
1987, 1818, 1851, 1184, 1408, 1665}, {1495, 1875, 625, 957, 1337, 64,
1363, 1737, 613, 1850}, {1837, 889, 1679, 526, 238, 409, 979, 281, 1640,
1009}, {345, 863, 148, 1972, 1287, 1694, 819, 1415, 1516, 1741}, {667,
756, 27, 1036, 704, 524, 842, 1663, 1510, 1064}, {534, 1343, 937, 570,
1568, 261, 864, 584, 959, 72}, {933, 1204, 1183, 1757, 312, 884, 631,
430, 301, 1885}, {1133, 985, 1202, 568, 39, 1369, 855, 1549, 1393, 761},
{1354, 192, 668, 1235, 1647, 879, 1642, 429, 1584, 1003}, {332, 1825,
530, 262, 1236, 1623, 185, 1684, 926, 351}, {1677, 728, 1191, 1895, 1797,
593, 259, 302, 215, 1906}, {1625, 1099, 1956, 1113, 636, 1519, 247, 1702,
1496, 875}, {443, 549, 161, 404, 1992, 1072, 1788, 61, 1720, 1982}, {198,
848, 1223, 241, 1066, 797, 1734, 1401, 1464, 1802}, {772, 69, 141, 408,
1324, 1468, 1955, 1059, 326, 68}, {509, 1706, 1592, 1594, 18, 111, 1800,
525, 209, 1179}, {1637, 689, 338, 1571, 747, 127, 900, 9, 447, 790},
{938, 1653, 792, 1921, 1756, 1144, 142, 362, 820, 1617}, {813, 1544,
1828, 633, 451, 1497, 610, 1114, 532, 963}, {1281, 276, 999, 147, 1379,
918, 1596, 321, 1048, 1257}, {910, 347, 1051, 1787, 1608, 1583, 391,
1002, 948, 1241}, {1701, 550, 426, 1898, 1289, 1925, 658, 1901, 1194,
814}, {1644, 1439, 1112, 1431, 1297, 253, 862, 1132, 615, 705}, {850,
1719, 29, 448, 421, 323, 214, 1010, 1381, 1251}, {1389, 748, 212, 1660,
1108, 143, 1444, 1524, 1587, 1523}, {951, 1208, 1670, 1214, 420, 470,
1313, 1226, 1697, 1110}, {1949, 1155, 846, 151, 1912, 381, 1088, 85, 313,
1326}, {1429, 778, 373, 744, 904, 157, 1981, 1231, 399, 154}, {371, 921,
685, 651, 1248, 1501, 1823, 497, 20, 1101}, {540, 1457, 213, 1217, 1274,
97, 500, 1277, 738, 432}, {1595, 194, 726, 1674, 1465, 401, 1347, 43,
1945, 1398}, {828, 330, 1207, 1094, 1557, 1420, 906, 311, 1747, 1554},
{460, 1561, 1075, 343, 724, 1947, 1031, 1129, 2000, 1855}, {1103, 1232,
1355, 1509, 1673, 1282, 1182, 619, 1819, 48}, {233, 602, 902, 395, 765,
200, 1877, 656, 1117, 1067}, {1285, 1829, 462, 783, 953, 629, 349, 1798,
676, 844}, {1017, 369, 1998, 422, 1280, 892, 1148, 1618, 482, 1683},
{836, 1105, 1696, 1951, 580, 562, 849, 1273, 122, 1873}, {743, 1726,
1537, 838, 710, 51, 121, 1796, 1463, 295}, {474, 859, 962, 110, 1006,
1172, 1259, 167, 1348, 1799}, {1830, 1599, 1984, 870, 263, 1375, 801,
502, 309, 952}, {605, 1939, 436, 706, 554, 455, 1219, 890, 388, 1016},
{1069, 283, 1996, 1883, 1436, 96, 489, 77, 86, 1279}, {481, 1654, 1853,
599, 135, 1586, 1504, 503, 1708, 880}, {195, 1806, 1805, 1527, 983, 1508,
128, 288, 367, 1723}, {1426, 1774, 124, 230, 1448, 514, 854, 1498, 310,
693}, {74, 1414, 1070, 659, 120, 1386, 1866, 1781, 1681, 506}, {591, 782,
703, 1607, 1952, 1090, 1700, 507, 1096, 1345}, {1832, 1777, 1591, 164,
1397, 731, 1831, 405, 316, 567}, {1760, 606, 3, 1403, 1669, 457, 476,
1460, 1015, 515}, {1041, 346, 1968, 335, 1181, 1814, 1485, 303, 1085,
1322}, {370, 538, 1145, 361, 1615, 1995, 1513, 1068, 1662, 1323}, {865,
841, 1391, 304, 1666, 1645, 987, 1533, 243, 1227}, {1467, 1331, 928,
1246, 1714, 1008, 1985, 1606, 277, 611}, {1360, 106, 1611, 1106, 273, 79,
1991, 700, 1329, 1371}, {1532, 666, 1171, 217, 205, 1639, 1790, 924, 763,
896}, {914, 804, 1733, 1311, 1462, 290, 1839, 1550, 170, 138}, {1526,
1147, 1742, 1547, 1821, 350, 1250, 931, 1065, 1298}, {1140, 1238, 173,
719, 1935, 82, 1392, 1071, 687, 891}, {1761, 1979, 492, 118, 1933, 528,
628, 165, 774, 860}, {888, 1169, 709, 176, 909, 28, 1546, 145, 832,
1092}, {1944, 1104, 191, 793, 1983, 718, 1960, 424, 1125, 612} }; */
public class RandomValues {
    public static int[][] genMatrix(int numRows, int numCols) {
        int[][] m = new int[numRows][numCols];
        Random rand = new Random();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                m[i][j] = rand.nextInt();
            }
        }
        return m;
    }

    public static float[][] genMatrixF(int numRows, int numCols) {
        float[][] m = new float[numRows][numCols];
        Random rand = new Random();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                m[i][j] = rand.nextFloat();
            }
        }
        return m;
    }

    public static double[][] genMatrixD(int numRows, int numCols) {
        double[][] m = new double[numRows][numCols];
        Random rand = new Random();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                m[i][j] = rand.nextDouble();
            }
        }
        return m;
    }

    public static int[] genVector(int numCols) {
        Random rand = new Random();
        return rand.ints().limit(numCols).toArray();
    }

    public static int[] genVector(int numCols, int bound) {
        Random rand = new Random();
        return rand.ints(numCols, 0, bound).toArray();
    }

    /**
     * Generates a vector with random values, within the range specified by [origin,bound[, with the specified length
     *
     * @see Random#ints()
     * @param numCols
     * 		
     * @param origin
     * 		
     * @param bound
     * 		
     * @return 
     */
    public static int[] genVector(int numCols, int origin, int bound) {
        Random rand = new Random();
        return rand.ints(numCols, origin, bound).toArray();
    }

    public static final int[][] Matrix10x10A = new int[][]{ new int[]{ 14 , 13 , 935 , 406 , 1713 , 1942 , 423 , 1988 , 1540 , 577 } , new int[]{ 1646 , 384 , 925 , 975 , 1135 , 496 , 1146 , 527 , 344 , 1575 } , new int[]{ 912 , 1724 , 759 , 940 , 348 , 1368 , 1778 , 753 , 911 , 227 } , new int[]{ 903 , 218 , 1200 , 1078 , 1869 , 1725 , 229 , 76 , 1768 , 654 } , new int[]{ 1316 , 56 , 1154 , 571 , 586 , 1187 , 616 , 882 , 775 , 733 } , new int[]{ 986 , 456 , 1593 , 190 , 1729 , 26 , 1026 , 1080 , 1784 , 1168 } , new int[]{ 1931 , 163 , 264 , 1385 , 673 , 1479 , 1275 , 614 , 156 , 1917 } , new int[]{ 114 , 137 , 811 , 873 , 1301 , 24 , 331 , 644 , 592 , 1225 } , new int[]{ 1892 , 824 , 1209 , 341 , 923 , 942 , 1602 , 1948 , 1374 , 359 } , new int[]{ 42 , 108 , 872 , 235 , 99 , 936 , 637 , 1195 , 742 , 758 } };

    public static final int[][] Matrix10x10B = new int[][]{ new int[]{ 1846 , 1302 , 486 , 1352 , 1715 , 1019 , 1795 , 1443 , 1346 , 109 } , new int[]{ 1867 , 1551 , 1638 , 1567 , 119 , 917 , 249 , 1751 , 1060 , 1691 } , new int[]{ 469 , 695 , 995 , 1459 , 773 , 1507 , 883 , 620 , 876 , 1178 } , new int[]{ 944 , 1327 , 1076 , 1441 , 1766 , 1334 , 574 , 760 , 966 , 1014 } , new int[]{ 1312 , 1139 , 1817 , 1880 , 1141 , 37 , 932 , 1252 , 950 , 572 } , new int[]{ 1990 , 453 , 1053 , 1664 , 990 , 871 , 1908 , 270 , 680 , 1841 } , new int[]{ 1886 , 224 , 1233 , 1224 , 1940 , 1980 , 1319 , 1589 , 1261 , 1555 } , new int[]{ 1074 , 1175 , 66 , 1138 , 1119 , 1728 , 1966 , 661 , 1446 , 715 } , new int[]{ 36 , 1534 , 650 , 1753 , 282 , 996 , 874 , 1840 , 812 , 569 } , new int[]{ 649 , 1619 , 1736 , 674 , 1406 , 204 , 377 , 1536 , 49 , 368 } };

    public static final int[][] Matrix6x6A = new int[][]{ new int[]{ 87 , 1122 , 1635 , 1603 , 1718 , 84 } , new int[]{ 1249 , 1037 , 168 , 919 , 1511 , 2259 } , new int[]{ 978 , 972 , 821 , 1686 , 991 , 615 } , new int[]{ 1687 , 1153 , 547 , 412 , 180 , 61 } , new int[]{ 38 , 598 , 414 , 529 , 1040 , 54 } , new int[]{ 712 , 1338 , 239 , 210 , 717 , 275 } };

    public static final int[][] Matrix6x6B = new int[][]{ new int[]{ 632 , 1152 , 1916 , 997 , 199 , 21 } , new int[]{ 1634 , 1926 , 33 , 1077 , 609 , 16 } , new int[]{ 5 , 1705 , 1336 , 1655 , 1520 , 1861 } , new int[]{ 1994 , 1570 , 1035 , 92 , 1862 , 25 } , new int[]{ 1928 , 363 , 806 , 739 , 35 , 98 } , new int[]{ 1934 , 980 , 1661 , 461 , 1115 , 483 } };

    public static final int[] VectorA10 = new int[]{ 242 , 732 , 394 , 1382 , 1427 , 597 , 435 , 520 , 446 , 1965 };

    public static final int[] VectorB10 = new int[]{ 1874 , 1449 , 1222 , 297 , 895 , 954 , 1353 , 905 , 1499 , 232 };

    public static final int[] VectorC6 = new int[]{ 54 , 1192 , 417 , 1430 , 6 , 716 };

    public static final int[] VectorD6 = new int[]{ 345 , 1752 , 1306 , 491 , 1986 , 800 };
}

